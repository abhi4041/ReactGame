import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

const Heading = (props) => {
  return (
    <div>
      <h2>Play Nine!</h2>
      <hr></hr>
    </div>
  );
}

const Stars = (props) => {
  let stars = [];
  for(let i = 0; i < props.numberOfStars; i++)
    stars.push(<span key={i}><i className="fa fa-star" key={i} aria-hidden="true"></i>     </span>)
  return (
    <div className="col-md-5">
      <h1>{stars}</h1>
    </div>
  )
}

const Buttons = (props) => {
  let button;
  var choiceBtnCnt;
  switch (props.gameState) {
    case 1:
      button = <button className="btn btn-success btn-lg"
                style={{marginBottom: "10px"}}
                onClick={props.checkTheSum}
                disabled={props.usedNumbers.length === 0}>
                <span className="glyphicon glyphicon-ok" aria-hidden="true">
                </span></button>;
      break;

    case 2:
      button = <button className="btn btn-danger btn-lg"
                style={{marginBottom: "10px"}}
                onClick={props.checkTheSum}
                disabled={props.usedNumbers.length === 0}>
                <span className="glyphicon glyphicon-remove" aria-hidden="true">
                </span></button>;
      break;

    default:
      button = <button className="btn btn-info btn-lg"
                style={{marginBottom: "10px"}}
                onClick={props.checkTheSum}
                disabled={props.usedNumbers.length === 0}>
                =</button>;
      break;
  }

  // Update to restart when there are zero choices
  if(props.choicesLeft === 0) {
    choiceBtnCnt = "Restart";
  } else {
    choiceBtnCnt = props.choicesLeft;
  }

  return (
    <div className="col-md-2">
        <div>
          {button}
        </div>
        <div>
          <button className="btn btn-warning"
                  onClick={props.choiceClickHandler}
                  >
                  <i className="fa fa-refresh"
                    aria-hidden="true">  {choiceBtnCnt}
                  </i>
          </button>
        </div>
    </div>
  )
}

const CurrentNumbers = (props) => {
  let numbers = [];

  // TODO: Move to App.css
  var btnStyle = {
    borderRadius: "100%",
    margin: "4px 4px",
    backgroundColor: "silver",
    border: "none",
    textDecoration: "none",
    display: "inline-block",
    fontSize: "20px",
    padding: "8px"
  }

  for(let i = 0; i < props.currentNumbers.length; i++)
    numbers.push(<button style={btnStyle} key={i}
                         onClick={() => props.currentNumberClick(props.currentNumbers[i])}>
                         <span key={i+10}>{props.currentNumbers[i]}  </span></button>);
  return (
    <div className="col-md-5">
      {numbers}
    </div>
  );
}

const Numbers = (props) => {
  let numbers = [];

  // unique keys are just numbers and unique keys for each inner
  // elements are generated by adding the maximum number of btns
  for(let i = 1; i < 10; i++)
    numbers.push(<button className="btn btn-default"
    style={{backgroundColor: props.usedNumbers.includes(i) ? "silver" : "white"}}
    disabled={props.usedNumbers.includes(i) ? true : false}
    onClick={() => props.handleNumberClick(i)} key={i}><span key={i+10}>{i}  </span></button>);
  return (
    <div className="pagination">
      {numbers}
    </div>
  );
}

const DoneFrame = (props) => {
    let doneMsg;
    if(props.doneStatus === 1)
      doneMsg = <h1>You Lost the Game</h1>;
    else if(props.doneStatus === 2)
      doneMsg = <h1>Hurray..You won the game.</h1>
    else {
      doneMsg = <h1></h1>
    }
    return(
      <div>{doneMsg}</div>
    );
}

class Game extends Component {
  // Get random number between 1 and 9
  getRandomNumber(min, max) {
    return Math.ceil(Math.random() * (max - min) + min);
  }

  // NOTE: gameState - 0, 1, 2
  // 0 - initial state
  // 1 - correct tick state - when equal
  // 2 - wrong tick state -  when not equal
  constructor(props) {
    super(props);
    this.state = {
      numberOfStars: this.getRandomNumber(1, 9),
      choicesLeft: 5,
      usedNumbers: [],
      currentNumbers: [],
      gameState: 0,
      doneStatus: 0
    };
  }

  // Choice Click Handler
  choiceClickHandler() {
    if(this.state.doneStatus === 0) {
      if(this.state.choicesLeft === 1 && this.state.usedNumbers.length !== 9) {
        this.setState({
          numberOfStars: this.getRandomNumber(1, 9),
          choicesLeft: this.state.choicesLeft-1,
          doneStatus: 1
        });
      } else {
        this.setState({
          numberOfStars: this.getRandomNumber(1, 9),
          choicesLeft: this.state.choicesLeft-1
        });
      }
    } else {
      this.setState({
        numberOfStars: this.getRandomNumber(1, 9),
        choicesLeft: 5,
        usedNumbers: [],
        currentNumbers: [],
        gameState: 0,
        doneStatus: 0
      });
    }
  }

  // Check the sum of the numbers and number of stars
  checkTheSum() {
    var done = 0;
    if(this.state.choicesLeft >= 0 && this.state.usedNumbers.length === 9)
      done = 1;
    if(this.state.gameState === 1) {
      this.setState({
        numberOfStars: this.getRandomNumber(1, 9),
        gameState: 0,
        doneStatus: done === 1 ? 2 : this.state.doneStatus
      })
    }
    else if(this.state.gameState === 2) {
      this.setState({
        gameState: 0
      })
    }
    else {
      // If Numbers on right side are equal to the stars on left
      if(this.state.numberOfStars === this.state.currentNumbers.reduce((a, b) => a + b, 0)) {
        this.setState({
          currentNumbers: [],
          gameState: 1
        })
      } else {
        this.setState({
          gameState: 2
        })
      }
    }
  }

  // (Used) Number Click Handler
  handleNumberClick(i) {
    this.setState({
      usedNumbers: this.state.usedNumbers.concat(i),
      currentNumbers: this.state.currentNumbers.concat(i)
    })
  }

  // Current Number Click Handler
  currentNumberClick(i) {
    this.setState({
      usedNumbers: this.state.usedNumbers.filter(e => e !== i),
      currentNumbers: this.state.currentNumbers.filter(e => e !== i),
      gameState: this.state.currentNumbers.length === 0 ? 0 : this.state.gameState
    })
  }

  render(){
    return (
      <div className="App container">
        <div>
          <Heading />
          <div className="row">
            <Stars numberOfStars={this.state.numberOfStars}/>
            <Buttons choicesLeft={this.state.choicesLeft}
                     choiceClickHandler={this.choiceClickHandler.bind(this)}
                     checkTheSum={this.checkTheSum.bind(this)}
                     usedNumbers={this.state.usedNumbers}
                     gameState={this.state.gameState}/>
            <CurrentNumbers currentNumbers={this.state.currentNumbers}
                            currentNumberClick={this.currentNumberClick.bind(this)}/>
          </div>
          <div className="row">
            <hr></hr>
            <Numbers usedNumbers={this.state.usedNumbers} currentNumbers={this.state.currentNumbers}
                     handleNumberClick={this.handleNumberClick.bind(this)}/>
            <DoneFrame doneStatus={this.state.doneStatus}/>
          </div>
        </div>
      </div>
    );
  }
}

export default Game;
